BaseView = require './layout/base_view'
FileCacheHandler = require '../lib/file_cache_handler'
pathHelper = require '../lib/path'

log = require('../lib/persistent_log')
    prefix: "MediaPlayerView"
    date: true

module.exports = class MediaPlayerView extends BaseView

    btnBackEnabled: true
    template: require '../templates/media_player'
    append: true
    refs:
        picture: '#mediaPicture'
        container: '.mediaContainer'


    initialize: (@path, @mimetype) ->
        @fileCacheHandler = new FileCacheHandler()
        @fileName = pathHelper.getFileName @path
        @layout = app.router.layout

#        if @type is 'file-pdf'
#            @pdf = PDFJS
#            @pdf.workerSrc = "/js/pdf.worker.js";
#            window.resolveLocalFileSystemURI @path, ((e) =>
#                e.file (f) =>
#                    reader = new FileReader
#
#                    reader.onloadend = (evt) =>
#                        @pdf.getDocument(new Uint8Array(evt.target.result)).then ((pdf) =>
#                            # Loop from 1 to total_number_of_pages in PDF document
#                            i = 1
#                            while i <= pdf.numPages
#                                # Get desired page
#                                pdf.getPage(i).then (page) =>
#                                    scale = 1
#                                    viewport = page.getViewport(scale)
#                                    div = document.createElement('div')
#                                    # Set id attribute with page-#{pdf_page_number} format
#                                    div.setAttribute 'id', 'page-' + page.pageIndex + 1
#                                    # This will keep positions of child elements as per our needs
#                                    div.setAttribute 'style', 'position: relative'
#                                    # Append div within div#container
#                                    @container[0].appendChild div
#                                    # Create a new Canvas element
#                                    canvas = document.createElement('canvas')
#                                    # Append Canvas within div#page-#{pdf_page_number}
#                                    div.appendChild canvas
#                                    context = canvas.getContext('2d')
#                                    canvas.height = viewport.height
#                                    canvas.width = viewport.width
#                                    renderContext =
#                                        canvasContext: context
#                                        viewport: viewport
#                                    # Render PDF page
#                                    page.render renderContext
#                                    return
#                                i++
#
#                                # ---
#                                # generated by js2coffee 2.2.0
#                            return
#                        ), (error) ->
#                            console.log 'PDFjs error:' + error.message
#                            return
#                        return
#
#                    reader.readAsArrayBuffer f
#                    return
#                return
#            ), (e) ->
#                console.log 'error getting file'
#                return
#
#                # ---
#                # generated by js2coffee 2.2.0


    events: ->
        'click #mediaPicture': 'toggleAction'
        'click #exit': 'onClickExit'
        'click #open': 'onClickOpen'
        'click #remove': 'removeFile'


    beforeRender: ->
        StatusBar.backgroundColorByHexString "#000"
        @layout.hideHeader()


    toggleAction: ->
        @picture.toggleClass 'display-actions'


    onClickOpen: (e) ->
        e.preventDefault()
        @fileCacheHandler.open @path


    onClickExit: (event) ->
        event.preventDefault() if event
        @layout.showHeader()
        window.history.back()
        @layout.alredyLoad = true
        @layout.views.pop()
        @destroy()


    removeFile: ->
        cozyFileId = pathHelper.getFileName pathHelper.getDirName @path
        cozyFile = _id: cozyFileId

        @fileCacheHandler.removeLocal cozyFile, =>
            @onClickExit()
            $("[data-key=#{cozyFileId}] .is-cached").removeClass 'is-cached'


    getRenderData: ->
        mimetype:  @mimetype
        path: @path
        fileName: @fileName


    destroy: ->
        StatusBar.backgroundColorByHexString "#33A6FF"
        super
